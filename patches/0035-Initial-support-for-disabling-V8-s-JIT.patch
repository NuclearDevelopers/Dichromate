From 1f9225c44b06c8b9aeff16dc444b721f9e757db8 Mon Sep 17 00:00:00 2001
From: qua3k <cliffmaceyak@gmail.com>
Date: Tue, 19 Oct 2021 07:36:10 -0400
Subject: [PATCH] Initial support for disabling V8's JIT

This adds a flag in `chrome://flags` for toggling the V8 JIT
compiler; it is default disabled.
---
 chrome/browser/about_flags.cc              | 5 +++++
 chrome/browser/flag-metadata.json          | 7 +++++++
 chrome/browser/flag-never-expire-list.json | 1 +
 chrome/browser/flag_descriptions.cc        | 5 +++++
 chrome/browser/flag_descriptions.h         | 3 +++
 gin/gin_features.cc                        | 3 +++
 gin/gin_features.h                         | 1 +
 gin/v8_initializer.cc                      | 4 ++++
 8 files changed, 29 insertions(+)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index f99b965282289..4585d5d22d1e3 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -173,6 +173,7 @@
 #include "device/gamepad/public/cpp/gamepad_features.h"
 #include "device/vr/buildflags/buildflags.h"
 #include "extensions/buildflags/buildflags.h"
+#include "gin/gin_features.h"
 #include "gpu/config/gpu_finch_features.h"
 #include "gpu/config/gpu_switches.h"
 #include "media/audio/audio_features.h"
@@ -6126,6 +6127,10 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kDisableProcessReuseDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(features::kDisableProcessReuse)},
 
+    {"disable-v8-jit", flag_descriptions::kV8NoJITName,
+     flag_descriptions::kV8NoJITDescription, kOsAll,
+     FEATURE_VALUE_TYPE(features::kV8NoJIT)},
+
 #if !BUILDFLAG(IS_ANDROID)
     {"enable-accessibility-live-caption",
      flag_descriptions::kEnableAccessibilityLiveCaptionName,
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index e9e7695cd89aa..49220e18bc2ff 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -1478,6 +1478,13 @@
     // issues.
     "expiry_milestone": -1
   },
+  {
+    "name": "disable-v8-jit",
+    "owners": [ "cliffmaceyak@gmail.com" ],
+    // This flag does not expire because it allows users to disable the
+    // V8 Just-In-Time compiler.
+    "expiry_milestone": -1
+  },
   {
     "name": "disable-virtual-keyboard",
     "owners": [ "dvallet", "essential-inputs-team@google.com" ],
diff --git a/chrome/browser/flag-never-expire-list.json b/chrome/browser/flag-never-expire-list.json
index 138ab3676967e..3ea6fd25ad954 100644
--- a/chrome/browser/flag-never-expire-list.json
+++ b/chrome/browser/flag-never-expire-list.json
@@ -30,6 +30,7 @@
   "disable-explicit-dma-fences",
   "disable-javascript-harmony-shipping",
   "disable-threaded-scrolling",
+  "disable-v8-jit",
   "disable-webrtc-hw-decoding",
   "disable-webrtc-hw-encoding",
   "disallow-doc-written-script-loads",
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index a8794385ed5b2..d29efc94af051 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -3126,6 +3126,11 @@ const char kVcBackgroundReplaceDescription[] =
     "Enables background replacement feature for video conferencing on "
     "chromebooks. THIS WILL OVERRIDE BACKGROUND BLUR.";
 
+const char kV8NoJITName[] = "Disable V8 JIT (JITless)";
+const char kV8NoJITDescription[] =
+    "Security mode that disables all runtime allocation of "
+    "executable memory";
+
 const char kV8VmFutureName[] = "Future V8 VM features";
 const char kV8VmFutureDescription[] =
     "This enables upcoming and experimental V8 VM features. "
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index a28e016aad3e6..002aa58970890 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1777,6 +1777,9 @@ extern const char kVideoConferenceDescription[];
 extern const char kVcBackgroundReplaceName[];
 extern const char kVcBackgroundReplaceDescription[];
 
+extern const char kV8NoJITName[];
+extern const char kV8NoJITDescription[];
+
 extern const char kV8VmFutureName[];
 extern const char kV8VmFutureDescription[];
 
diff --git a/gin/gin_features.cc b/gin/gin_features.cc
index 1ef4db06a6dd2..bce8bc77215a4 100644
--- a/gin/gin_features.cc
+++ b/gin/gin_features.cc
@@ -69,6 +69,9 @@ BASE_FEATURE(kV8NoReclaimUnmodifiedWrappers,
              "V8NoReclaimUnmodifiedWrappers",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+// Disables the V8 Just-in-Time compiler
+const base::Feature kV8NoJIT{"V8NoJIT", base::FEATURE_DISABLED_BY_DEFAULT};
+
 // Enables W^X code memory protection in V8.
 // This is enabled in V8 by default. To test the performance impact, we are
 // going to disable this feature in a finch experiment.
diff --git a/gin/gin_features.h b/gin/gin_features.h
index 5b2d4498dcd86..65b12b2a49e11 100644
--- a/gin/gin_features.h
+++ b/gin/gin_features.h
@@ -27,6 +27,7 @@ GIN_EXPORT BASE_DECLARE_FEATURE(kV8FlushEmbeddedBlobICache);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8LazyFeedbackAllocation);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8Maglev);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8NoReclaimUnmodifiedWrappers);
+GIN_EXPORT BASE_DECLARE_FEATURE(kV8NoJIT);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8CodeMemoryWriteProtection);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8OffThreadFinalization);
 GIN_EXPORT BASE_DECLARE_FEATURE(kV8OptimizeJavascript);
diff --git a/gin/v8_initializer.cc b/gin/v8_initializer.cc
index 1b77e0dd1f7f9..5a1520e3a560d 100644
--- a/gin/v8_initializer.cc
+++ b/gin/v8_initializer.cc
@@ -298,6 +298,10 @@ void SetFlags(IsolateHolder::ScriptMode mode,
   SetV8FlagsIfOverridden(features::kV8SlowHistograms, "--slow-histograms",
                          "--no-slow-histograms");
 
+  if (base::FeatureList::IsEnabled(features::kV8NoJIT)) {
+    SetV8Flags("--jitless");
+  }
+
   if (base::FeatureList::IsEnabled(features::kV8ConcurrentSparkplug)) {
     if (int max_threads = features::kV8ConcurrentSparkplugMaxThreads.Get()) {
       SetV8FlagsFormatted("--concurrent-sparkplug-max-threads=%i", max_threads);
-- 
2.39.1.windows.1

