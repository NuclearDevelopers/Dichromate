From 45aede094891185da54e1922eb2085e391c4ae3e Mon Sep 17 00:00:00 2001
From: Douloureux <Douloureux@users.noreply.github.com>
Date: Sun, 9 Oct 2022 00:00:00 +0000
Subject: [PATCH] Add flag to toggle browsing history

TODO:
     A UI toggle will be added in the future, replacing the flag.
     Option to clear history as soon as this feature is enabled.
---
 chrome/browser/about_flags.cc                     |  4 ++++
 chrome/browser/flag-metadata.json                 |  7 +++++++
 chrome/browser/flag-never-expire-list.json        |  1 +
 chrome/browser/flag_descriptions.cc               |  5 +++++
 chrome/browser/flag_descriptions.h                |  3 +++
 chrome/browser/history/history_service_factory.cc | 10 ++++++++++
 content/public/common/content_features.cc         |  4 ++++
 content/public/common/content_features.h          |  1 +
 8 files changed, 35 insertions(+)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 232f28fa1a9c0..9d13239003437 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -6638,6 +6638,10 @@ const FeatureEntry kFeatureEntries[] = {
          network::switches::kUnsafelyTreatInsecureOriginAsSecure,
          "")},
 
+    {"disable-browsing-history", flag_descriptions::kDisableBrowsingHistoryName,
+      flag_descriptions::kDisableBrowsingHistoryDescription, kOsAll,
+      FEATURE_VALUE_TYPE(features::kDisableBrowsingHistory)},
+
     {"disable-process-reuse", flag_descriptions::kDisableProcessReuse,
      flag_descriptions::kDisableProcessReuseDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(features::kDisableProcessReuse)},
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index 0e7b1c440b08e..cc1c23ae69878 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -1406,6 +1406,13 @@
     // customize switches.
     "expiry_milestone": -1
   },
+  {
+    "name": "disable-browsing-history",
+    "owners": [ "Douloureux@users.noreply.github.com" ],
+    // This flag does not expire because it allows users to disable saving
+    // their browsing history.
+    "expiry_milestone": -1
+  },
   {
     "name": "disable-camera-frame-rotation-at-source",
     "owners": [ "chromeos-camera-eng@google.com" ],
diff --git a/chrome/browser/flag-never-expire-list.json b/chrome/browser/flag-never-expire-list.json
index 2c5af1ff980c7..f1be0b33d85ee 100644
--- a/chrome/browser/flag-never-expire-list.json
+++ b/chrome/browser/flag-never-expire-list.json
@@ -27,6 +27,7 @@
   "disable-accelerated-video-decode",
   "disable-accelerated-video-encode",
   "disable-buffer-bw-compression",
+  "disable-browsing-history",
   "disable-explicit-dma-fences",
   "disable-javascript-harmony-shipping",
   "disable-reading-from-canvas",
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index 0545eb8e6cd1d..bae2d1c1f38b2 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -1133,6 +1133,11 @@ const char kDownloadRangeName[] = "Enable download range support";
 const char kDownloadRangeDescription[] =
     "Enables arbitrary download range request support.";
 
+const char kDisableBrowsingHistoryName[] = "Disable browsing history";
+const char kDisableBrowsingHistoryDescription[] = 
+    "Disables saving browsing history. Browser cache must be cleared "
+    "in order to stop showing suggestions in the search bar.";
+
 const char kEnableNetworkLoggingToFileName[] = "Enable network logging to file";
 const char kEnableNetworkLoggingToFileDescription[] =
     "Enables network logging to a file named netlog.json in the user data "
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 69ff019154700..7c8b755b5fe70 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -107,6 +107,9 @@ extern const char kDefaultChromeAppsMigrationDescription[];
 extern const char kDeferredFontShapingName[];
 extern const char kDeferredFontShapingDescription[];
 
+extern const char kDisableBrowsingHistoryName[];
+extern const char kDisableBrowsingHistoryDescription[];
+
 extern const char kDocumentPictureInPictureApiName[];
 extern const char kDocumentPictureInPictureApiDescription[];
 
diff --git a/chrome/browser/history/history_service_factory.cc b/chrome/browser/history/history_service_factory.cc
index 54e05c57b10bc..e02d7cd0494ad 100644
--- a/chrome/browser/history/history_service_factory.cc
+++ b/chrome/browser/history/history_service_factory.cc
@@ -17,6 +17,9 @@
 #include "components/keyed_service/core/service_access_type.h"
 #include "components/prefs/pref_service.h"
 
+#include "content/public/common/content_features.h"
+#include "base/feature_list.h"
+
 namespace {
 
 std::unique_ptr<KeyedService> BuildHistoryService(
@@ -38,6 +41,12 @@ std::unique_ptr<KeyedService> BuildHistoryService(
 history::HistoryService* HistoryServiceFactory::GetForProfile(
     Profile* profile,
     ServiceAccessType sat) {
+  
+  // Disable saving history if the disable-browsing-history flag is enabled.
+  if (base::FeatureList::IsEnabled(features::kDisableBrowsingHistory)) {
+    profile->GetPrefs()->SetBoolean(prefs::kSavingBrowserHistoryDisabled, true);
+  } 
+
   // If saving history is disabled, only allow explicit access.
   if (sat != ServiceAccessType::EXPLICIT_ACCESS &&
       profile->GetPrefs()->GetBoolean(prefs::kSavingBrowserHistoryDisabled)) {
@@ -53,6 +62,7 @@ history::HistoryService* HistoryServiceFactory::GetForProfileIfExists(
     Profile* profile,
     ServiceAccessType sat) {
   // If saving history is disabled, only allow explicit access.
+
   if (sat != ServiceAccessType::EXPLICIT_ACCESS &&
       profile->GetPrefs()->GetBoolean(prefs::kSavingBrowserHistoryDisabled)) {
     return nullptr;
diff --git a/content/public/common/content_features.cc b/content/public/common/content_features.cc
index 112e24c8f2eac..45473b2c3f4e9 100644
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -295,6 +295,10 @@ BASE_FEATURE(kDigitalGoodsApi,
 #endif
 );
 
+// Disables saving browser history.
+const base::Feature kDisableBrowsingHistory {"DisableBrowsingHistory", 
+                                                base::FEATURE_DISABLED_BY_DEFAULT};
+
 // Taints all <canvas> elements, regardless of origin.
 const base::Feature kDisableReadingFromCanvas {"DisableReadingFromCanvas",
                                                 base::FEATURE_DISABLED_BY_DEFAULT};
diff --git a/content/public/common/content_features.h b/content/public/common/content_features.h
index 8be7fd05723e4..96add8a306696 100644
--- a/content/public/common/content_features.h
+++ b/content/public/common/content_features.h
@@ -64,6 +64,7 @@ CONTENT_EXPORT BASE_DECLARE_FEATURE(kDevicePosture);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kDigitalGoodsApi);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kDocumentPolicy);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kDocumentPolicyNegotiation);
+CONTENT_EXPORT BASE_DECLARE_FEATURE(kDisableBrowsingHistory);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kDisableReadingFromCanvas);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kEarlyEstablishGpuChannel);
 CONTENT_EXPORT BASE_DECLARE_FEATURE(kEarlyHintsPreloadForNavigation);
-- 
2.35.1.windows.2

